name: Tests & Publish

on:
  push:
    branches-ignore:
      - '*-no-ci'
    tags:
      - '*'
  pull_request:
  schedule:
    # * is a special character in YAML and must be quoted
    - cron:  '55 2 */7 * *'

  # Manually triggered workflow
  workflow_dispatch:
    inputs:
      target_repo:
        description: 'The repository to publish the package'
        required: true
        default: 'pypi.org'
        type: choice
        options:
        - pypi.org
        - test.pypi.org

env:
  INSTALL_POETRY_VERSION: 1.*
  POETRY_INSTALLER_PARALLEL: true
  POETRY_VIRTUALENVS_CREATE: true

jobs:
  tests:
    name: Python ${{ matrix.python-version }} Ã— Django ${{ matrix.django-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.9", "3.8", "3.7", "3.6", "3.5"]
        django-version: ["4.0", "3.2", "3.1", "3.0", "2.2", "2.1"]
        exclude:
          # See https://docs.djangoproject.com/en/4.0/faq/install/#what-python-version-can-i-use-with-django
          # See https://docs.djangoproject.com/en/3.2/faq/install/#what-python-version-can-i-use-with-django
          # See https://docs.djangoproject.com/en/2.2/faq/install/#what-python-version-can-i-use-with-django
          - { python-version: "3.10", django-version: "3.1" }
          - { python-version: "3.10", django-version: "3.0" }
          - { python-version: "3.10", django-version: "2.2" }
          - { python-version: "3.10", django-version: "2.1" }

          - { python-version: "3.9", django-version: "2.1" }

          - { python-version: "3.8", django-version: "2.1" }

          - { python-version: "3.7", django-version: "4.0" }

          - { python-version: "3.6", django-version: "4.0" }

          - { python-version: "3.5", django-version: "4.0" }
          - { python-version: "3.5", django-version: "3.2" }
          - { python-version: "3.5", django-version: "3.1" }
          - { python-version: "3.5", django-version: "3.0" }

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Poetry
        uses: abatilo/actions-poetry@v2.0.0
        with:
          poetry-version: ${{ env.INSTALL_POETRY_VERSION }}
      - name: Install dependencies
        run: |
          poetry install --no-interaction
          poetry run pip install -U "django==${{ matrix.django-version }}.*"

      - name: Pytest
        run: |
          echo "Django version: $(poetry run django-admin --version)"
          poetry run pytest --cov=modernrpc --cov-report=term --cov-report=xml:coverage.xml .

      - name: Upload coverage results
        run: |
          pip install codacy-coverage coveralls

          # Submit coverage results to codacy.com
          python-codacy-coverage -r coverage.xml

          # Submit coverage results to coveralls
          coveralls
        env:
          CODACY_PROJECT_TOKEN : ${{ secrets.CODACY_PROJECT_TOKEN }}
          COVERALLS_REPO_TOKEN : ${{ secrets.COVERALLS_REPO_TOKEN }}

  black:
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - uses: actions/checkout@v3
      - name: Install Poetry
        uses: abatilo/actions-poetry@v2.0.0
        with:
          poetry-version: ${{ env.INSTALL_POETRY_VERSION }}
      - name: Install dependencies
        run: poetry install --no-interaction
      - name: Black
        run: poetry run black --check .

  flake8:
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - uses: actions/checkout@v3
      - name: Install Poetry
        uses: abatilo/actions-poetry@v2.0.0
        with:
          poetry-version: ${{ env.INSTALL_POETRY_VERSION }}
      - name: Install dependencies
        run: poetry install --no-interaction
      - name: Flake8
        run: poetry run flake8

  pylint:
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - uses: actions/checkout@v3
      - name: Install Poetry
        uses: abatilo/actions-poetry@v2.0.0
        with:
          poetry-version: ${{ env.INSTALL_POETRY_VERSION }}
      - name: Install dependencies
        run: poetry install --no-interaction
      - name: Pylint
        run: poetry run pylint modernrpc --exit-zero

  mypy:
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - uses: actions/checkout@v3
      - name: Install poetry
        run: pipx install 'poetry==${{ env.INSTALL_POETRY_VERSION }}'
      - name: Install dependencies
        run: poetry install --no-interaction
      - name: Mypy
        run: poetry run mypy -p modernrpc

  debug:
    runs-on: ubuntu-latest
    steps:
      - name: Print env information
        run: |
          echo "github.event_name = ${{ github.event_name }}"
          echo "github.ref = ${{ github.ref }}"
          echo "is a tag = ${{ startsWith(github.ref, 'refs/tags/') }}"
          echo "is a manual run = ${{ github.event.inputs.target_repo != '' }}"

  publish:
    runs-on: ubuntu-latest
    needs: [tests, flake8, mypy, black, pylint]
    # Only ran on tag push and manual trigger
    if: (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')) || github.event.inputs.target_repo != ''
    env:
    # inputs.target_repo is set only when workflow was manually triggered. Default to 'pypi.org' for tags push
      pypi_repository: ${{ github.event.inputs.target_repo || 'pypi.org' }}

    steps:
      - uses: actions/checkout@v3
      - name: Install Poetry
        uses: abatilo/actions-poetry@v2.0.0
        with:
          poetry-version: ${{ env.INSTALL_POETRY_VERSION }}

      - name: Publish on Pypi
        if: env.pypi_repository == 'pypi.org'
        run: |
          echo "Publish on ${{ env.pypi_repository }}"
          poetry publish --build -u __token__ -p ${{ secrets.PYPI_AUTH_TOKEN }}

      - name: Publish on TestPypi
        if: env.pypi_repository == 'test.pypi.org'
        run: |
          echo "Publish on ${{ env.pypi_repository }}"
          poetry config repositories.testpypi https://test.pypi.org/legacy/
          poetry publish --build -u __token__ -p ${{ secrets.PYPI_AUTH_TOKEN_TEST }} -r testpypi
