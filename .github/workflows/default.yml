name: Tests & Publish

on:
  push:
    branches-ignore:
      - '*-no-ci'
    tags:
      - '*'
  pull_request:
  schedule:
    # * is a special character in YAML and must be quoted
    - cron: '55 2 */7 * *'

  # Manually triggered workflow
  workflow_dispatch:
    inputs:
      target_repo:
        description: 'The repository to publish the package'
        required: true
        default: 'pypi.org'
        type: choice
        options:
        - pypi.org
        - test.pypi.org

env:
  UV_VERSION: 0.5.24
  # Hide warning about outdated pip version
  PIP_DISABLE_PIP_VERSION_CHECK: 1

jobs:
  debug:
    runs-on: ubuntu-24.04
    steps:
    - name: Print env information
      run: |
        echo "github.event_name = ${{ github.event_name }}"
        echo "github.ref = ${{ github.ref }}"
        echo "is a tag = ${{ startsWith(github.ref, 'refs/tags/') }}"
        echo "is a manual run = ${{ github.event.inputs.target_repo != '' }}"

  generate-jobs:
    runs-on: ubuntu-latest
    outputs:
      session: ${{ steps.set-matrix.outputs.session }}
    steps:
    - uses: actions/checkout@v4
    - name: Install nox
      uses: wntrblm/nox@1199ab3892b1a941f80ff052083d0a571abed79d  # https://github.com/wntrblm/nox/tags
    - name: Build GH Actions test matrix from nox sessions
      id: set-matrix
      shell: bash
      run: echo session=$(nox --json -l | jq -c '[.[].session]') | tee --append $GITHUB_OUTPUT

  checks:
    name: ${{ matrix.session }}
    needs: [generate-jobs]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        session: ${{ fromJson(needs.generate-jobs.outputs.session) }}
    steps:
    - uses: actions/checkout@v4
    - name: Install nox
      uses: wntrblm/nox@1199ab3892b1a941f80ff052083d0a571abed79d  # https://github.com/wntrblm/nox/tags
    - name: Install uv
      uses: astral-sh/setup-uv@v5
      with:
        version: ${{ env.UV_VERSION }}
    - run: nox -s "${{ matrix.session }}"

#   lockfile-check:
#     runs-on: ubuntu-24.04
#     needs: debug
#     steps:
#       - uses: actions/checkout@v4
#       - name: Setup environment
#         run: |
#           pipx install 'poetry==${{ env.INSTALL_POETRY_VERSION }}'
#           poetry install --no-interaction --with code-analysis
#       - name: Check pyproject.toml and poetry.lock consitency
#         run: poetry check
#
#   linter:
#     runs-on: ubuntu-24.04
#     needs: debug
#     steps:
#       - uses: actions/checkout@v4
#       - name: Setup environment
#         run: |
#           pipx install 'poetry==${{ env.INSTALL_POETRY_VERSION }}'
#           poetry install --no-interaction --with code-analysis
#       - name: Ruff
#         run: poetry run ruff check .
#
#   formatter:
#     runs-on: ubuntu-24.04
#     needs: debug
#     steps:
#       - uses: actions/checkout@v4
#       - name: Setup environment
#         run: |
#           pipx install 'poetry==${{ env.INSTALL_POETRY_VERSION }}'
#           poetry install --no-interaction --with code-analysis
#       - name: Ruff Format
#         run: poetry run ruff format . --check
#
#   mypy:
#     runs-on: ubuntu-24.04
#     needs: debug
#     steps:
#       - uses: actions/checkout@v4
#       - name: Setup environment
#         run: |
#           pipx install 'poetry==${{ env.INSTALL_POETRY_VERSION }}'
#           poetry install --no-interaction --with code-analysis
#       - name: Mypy
#         run: poetry run mypy .

#   publish:
#     runs-on: ubuntu-24.04
#     needs: [tests, lockfile-check, linter, formatter, mypy]
#     # Only ran on tag push and manual trigger
#     if: (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')) || github.event.inputs.target_repo != ''
#     env:
#       # inputs.target_repo is set only when workflow was manually triggered. Default to 'pypi.org' for tags push
#       pypi_repository: ${{ github.event.inputs.target_repo || 'pypi.org' }}
#
#     steps:
#       - uses: actions/checkout@v4
#       - name: Install Poetry
#         uses: abatilo/actions-poetry@v2
#         with:
#           poetry-version: ${{ env.INSTALL_POETRY_VERSION }}
#
#       - name: Publish on Pypi
#         if: env.pypi_repository == 'pypi.org'
#         run: |
#           echo "Publish on ${{ env.pypi_repository }}"
#           poetry publish --build -u __token__ -p ${{ secrets.PYPI_AUTH_TOKEN }}
#
#       - name: Publish on TestPypi
#         if: env.pypi_repository == 'test.pypi.org'
#         run: |
#           echo "Publish on ${{ env.pypi_repository }}"
#           poetry config repositories.testpypi https://test.pypi.org/legacy/
#           poetry publish --build -u __token__ -p ${{ secrets.PYPI_AUTH_TOKEN_TEST }} -r testpypi
