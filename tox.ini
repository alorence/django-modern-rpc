# Note: while tox currently supports config in pyproject.toml, for now it only support ini-style config passed
# as a big multi-line string value (under the key "tool.tox.legacy_tox_ini"). It is currently cleaner to keep the
# tox.ini file until tox support a proper toml-based configuration

[tox]
skip_missing_interpreters = true
# See:
#   - https://docs.djangoproject.com/en/2.2/faq/install/#what-python-version-can-i-use-with-django
#   - https://docs.djangoproject.com/en/3.2/faq/install/#what-python-version-can-i-use-with-django
#   - https://docs.djangoproject.com/en/4.2/faq/install/#what-python-version-can-i-use-with-django
env_list =
    py312-django{42,50}
    py{310,311}-django{32,40,41,42,50}
    py{38,39}-django{22,30,31,32,40,41,42}
    py37-django{21,22,30,31,32}
    ruff-check
    ruff-format
    mypy

[testenv]
deps =
    django21: Django==2.1.*
    django22: Django==2.2.*
    django30: Django==3.0.*
    django31: Django==3.1.*
    django32: Django==3.2.*
    django40: Django==4.0.*
    django41: Django==4.1.*
    django42: Django==4.2.*
    django50: Django==5.0.*

allowlist_externals =
    poetry

set_env =
  # Setup tox-specific poetry cache dir. By setting this, Poetry will not try to use any existing
  # system-wide poetry environment to run tests. With POETRY_VIRTUALENVS_IN_PROJECT=true, the environment
  # for the current python/django version will be kept clean
  POETRY_CACHE_DIR = {work_dir}/poetry-cache
  # Ensure poetry will use current tox's env_dir to install dependencies (but Django)
  # No .venv will be used
  POETRY_VIRTUALENVS_IN_PROJECT = true

commands_pre =
    poetry env use -v {env_dir}/bin/python
    # Install all dependencies but Django, which has already been installed inside tox environment
    poetry install --without django --with dev,tests --no-interaction

commands =
    # Display environment info, including python version
    poetry env info
    # Display Django version, just to be sure...
    poetry run django-admin --version
    # Run tests
    poetry run pytest {posargs}

[testenv:ruff-check]
commands_pre = poetry install --with code-analysis --without django,dev,tests --sync --no-interaction
commands = poetry run ruff check .

[testenv:ruff-format]
commands_pre = poetry install --with code-analysis --without django,dev,tests --sync --no-interaction
commands = poetry run ruff format . --check

[testenv:mypy]
commands_pre = poetry install --with code-analysis --without django,dev,tests --sync --no-interaction
commands = poetry run mypy .
