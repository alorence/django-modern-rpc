# Note: while tox currently supports config in pyproject.toml, for now it only support ini-style config passed
# as a big multi-line string value (under the key "tool.tox.legacy_tox_ini"). It is currently cleaner to keep the
# tox.ini file until tox support a proper toml-based configuration

[tox]
skip_missing_interpreters = true
# See:
#   - https://docs.djangoproject.com/en/2.2/faq/install/#what-python-version-can-i-use-with-django
#   - https://docs.djangoproject.com/en/3.2/faq/install/#what-python-version-can-i-use-with-django
#   - https://docs.djangoproject.com/en/4.0/faq/install/#what-python-version-can-i-use-with-django
envlist =
    py{310,311}-django{32,40,41}
    py{38,39}-django{22,30,31,32,40,41}
    py37-django{21,22,30,31,32}
    black
    mypy
    ruff
    pylint

[testenv]
deps =
    django21: Django==2.1.*
    django22: Django==2.2.*
    django30: Django==3.0.*
    django31: Django==3.1.*
    django32: Django==3.2.*
    django40: Django==4.0.*
    django41: Django==4.1.*

allowlist_externals =
    poetry
    django-admin
    pytest

commands_pre =
    poetry export --without django --with dev,tests -o {envdir}/tox_requirements.txt
    pip install -r {envdir}/tox_requirements.txt
commands =
    # Display python version
    python -V
    # Display Django version, just to be sure...
    django-admin --version
    # Run tests
    pytest {posargs}

[testenv:black]
commands_pre =
    poetry install --with black --no-interaction
commands =
    poetry run black .

[testenv:mypy]
commands_pre =
    poetry install --with mypy --no-interaction
commands =
    poetry run mypy .

[testenv:ruff]
commands_pre =
    poetry install --with linters --no-interaction
commands =
    poetry run ruff .

[testenv:pylint]
commands_pre =
    poetry install --with linters --no-interaction
commands =
    poetry run pylint --exit-zero modernrpc
