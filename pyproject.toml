# ------------------------------------------------------------------
# |                        Project config
# ------------------------------------------------------------------
[project]
name = "django-modern-rpc"
version = "2.0a1"
description = "Simple and powerful RPC server for your Django project"
readme = "README.md"
license = "MIT"

authors = [
    { name = "Antoine Lorence", email = "antoine.lorence@gmail.com" }
]
repository = "https://github.com/alorence/django-modern-rpc"
documentation = "https://django-modern-rpc.readthedocs.io"

classifiers = [
    "Programming Language :: Python",
    "Development Status :: 5 - Production/Stable",
    "Environment :: Web Environment",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Framework :: Django",
    "Framework :: Django :: 2.2",
    "Framework :: Django :: 3.0",
    "Framework :: Django :: 3.1",
    "Framework :: Django :: 3.2",
    "Framework :: Django :: 4.0",
    "Framework :: Django :: 4.1",
    "Framework :: Django :: 4.2",
    "Framework :: Django :: 5.0",
    "Framework :: Django :: 5.1",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
]

dependencies = []
requires-python = ">=3.7"

[project.optional-dependencies]
docutils = [
    "docutils == 0.19",
]
markdown = [
    "markdown == 3.4.4",
]
defusedxml = [
    "defusedxml == 0.7.1",
]

[project.urls]
"Bug Tracker" = "https://github.com/alorence/django-modern-rpc/issues"
"Demo" = "https://modernrpc.onrender.com"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["modernrpc"]

[tool.hatch.build.targets.sdist]
exclude = [
    ".*",
    "*.ini",
    "*.lock",
    "noxfile.py",
    "requirements*",
    "tests",
    "docs",
]

# ------------------------------------------------------------------
# |                        Dev dependencies
# ------------------------------------------------------------------
[tool.uv]
default-groups = ["django", "dev", "tests"]

[dependency-groups]
django = [
    "django ~= 3.2.25",
]
dev = [
    "jsonrpcclient ~= 4.0.3",
    "requests",
    "docutils ~= 0.19",
    "markdown ~= 3.4.4",
    "defusedxml",
]
tests = [
    "pytest",
    "pytest-django",
    "pytest-sugar",
    "pytest-cov",
]
code-analysis = [
    "ruff == 0.8.4",
    "mypy == 1.4.1",
    "django-stubs == 4.2.0",
    "types-docutils == 0.20.0.3",
    "types-markdown == 3.5.0.3",
]
docs = [
    "sphinx == 5.3.0",
    "sphinx-autobuild == 2021.3.14",
    "sphinx-book-theme == 1.0.1",
    "myst-parser == 1.0.0",
]

# ------------------------------------------------------------------
# |                        Pyetst settings
# ------------------------------------------------------------------
[tool.pytest.ini_options]
pythonpath = ["tests"]
testpaths = ["tests"]
python_files = ["test_*.py"]

# pytest-django settings
DJANGO_SETTINGS_MODULE = "testsite.settings"
FAIL_INVALID_TEMPLATE_VARS = true

# ------------------------------------------------------------------
# |                        Mypy settings
# ------------------------------------------------------------------
[tool.mypy]
exclude = [
    'noxfile\.py',
    '^tests/.+$',
    '^docs/.+$',
]
[[tool.mypy.overrides]]
module = [
    "defusedxml",
    "defusedxml.xmlrpc",
]
ignore_missing_imports = true

# ------------------------------------------------------------------
# |                        Ruff settings
# ------------------------------------------------------------------
[tool.ruff]
line-length = 120
extend-exclude = [
    "module_with_syntax_errors.py",
]

[tool.ruff.format]
# Use `\n` line endings for all files
line-ending = "lf"
quote-style = "double"

[tool.ruff.lint]
# List of rules currently enabled.
# Docs: https://beta.ruff.rs/docs/rules/
select = [
    "F", # pyflakes
    "E", "W", # pycodestyle Errors & warnings
    "C90", # mccabe: functions complexity
    "I", # isort
    #    "N", # pep8-naming
    #    "D", # pydocstyle
    "UP", # pyupgrade
    "YTT", # flake8-2020
    #     "ANN", # flake8-annotations
    "ASYNC", # flake8-async
    "S", # flake8-bandit
    #    "BLE", # flake8-blind-except
    #    "FBT", # flake8-boolean-trap
    "B", # flake8-bugbear
    "A", # flake8-builtins
    #    "COM", # flake8-commas
    # "CPY", # flake8-copyright
    "C4", # flake8-comprehensions
    #    "DTZ", # flake8-datetimez
    "T10", # flake8-debugger
    "DJ", # flake8-django
    #    "EM", # flake8-errormsg
    "EXE", # flake8-executable
    "FA", # flake8-future-annotations
    #    "ISC", # flake8-implicit-str-concat
    "ICN", # flake8-import-conventions
    #    "G", # flake8-logging-format
    #    "INP", # flake8-no-pep420
    "PIE", # flake8-pie
    "T20", # flake8-print
    "PYI", # flake8-pyi
    "PT", # flake8-pytest-style
    "Q", # flake8-quotes
    "RSE", # flake8-raise
    "RET", # flake8-return
    "SLF", # flake8-self
    "SLOT", # flake8-slots
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
    "TCH", # flake8-type-checking
    "INT", # flake8-gettext
    #    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    #    "TD", # flake8-todos
    #    "FIX", # flake8-fixme
    #    "ERA", # eradicate
    #    "PD", # pandas-vet
    "PGH", # pygrep-hooks
    "PLC", # PyLint (Convention)
    "PLE", # PyLint (Error)
    # "PLR", # PyLint (Refactor)
    "PLW", # PyLint (Warning)
    #    "TRY", # tryceratops
    "FLY", # flynt
    #    "NPY", # Numpy-specific
    "AIR", # Airflow
    "PERF", # Perflint
    # "FURB", # refurb
    "LOG", # flake8-logging
    "RUF", # Ruff specific rules
]

[tool.ruff.lint.per-file-ignores]
# Invalid import is expected in this file, this is part of a test
"tests/testsite/rpc_methods_stub/module_with_invalid_import.py" = ["F401"]
# Some issues are irrelevant in tests
"tests/*" = ["PLR2004", "PLR0913", "PLC1901", "S"]
"tests/unit/test_initialization.py" = ["SLF001"]

[tool.ruff.lint.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.ruff.lint.isort]
# TBD
