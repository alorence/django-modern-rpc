[build-system]
requires = ["poetry_core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "django-modern-rpc"
version = "1.0.1"

authors = ["Antoine Lorence <antoine.lorence@gmail.com>"]
description = "Simple and powerful RPC server for your Django project"
repository = "https://github.com/alorence/django-modern-rpc"
documentation = "https://django-modern-rpc.readthedocs.io"

readme = "README.md"
license = "MIT"
classifiers = [
    "Programming Language :: Python",
    "Development Status :: 5 - Production/Stable",
    "Environment :: Web Environment",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Framework :: Django",
    "Framework :: Django :: 2.1",
    "Framework :: Django :: 2.2",
    "Framework :: Django :: 3.0",
    "Framework :: Django :: 3.1",
    "Framework :: Django :: 3.2",
    "Framework :: Django :: 4.0",
    "Framework :: Django :: 4.1",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
]
packages = [
    { include = "modernrpc" }
]
include = ["README.md"]
exclude = ["tests"]

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/alorence/django-modern-rpc/issues"
"Demo" = "https://modernrpc.onrender.com"

# Dependencies specifications
[tool.poetry.extras]
docutils = ["docutils"]
markdown = ["markdown"]

[tool.poetry.dependencies]
python = "^3.7"
docutils = { version = "*", optional = true }
markdown = { version = "*", optional = true }

# Django group, allows tox to install a specific django version using pip
# i.e. poetry install --without django
[tool.poetry.group.django]
optional = false
[tool.poetry.group.django.dependencies]
django = ">=2.1"

[tool.poetry.group.dev]
optional = false
[tool.poetry.group.dev.dependencies]
jsonrpcclient = "^4.0.2"
requests = "*"
docutils = "*"
markdown = "*"

[tool.poetry.group.tests]
optional = false
[tool.poetry.group.tests.dependencies]
pytest = "^7.2"
pytest-django = "*"
pytest-sugar = "^0.9"
pytest-cov = "*"

[tool.poetry.group.tox]
optional = true
[tool.poetry.group.tox.dependencies]
tox = "^4"

[tool.poetry.group.docs]
optional = true
[tool.poetry.group.docs.dependencies]
sphinx = "^4"
sphinx-autobuild = "^2021.3"
sphinx-book-theme = "^0.3"
myst-parser = "^0.18.1"

[tool.poetry.group.black]
optional = true
[tool.poetry.group.black.dependencies]
black = "^23.1.0"

[tool.poetry.group.mypy]
optional = true
[tool.poetry.group.mypy.dependencies]
mypy = "^1.0.1"
django-stubs = "^1.14.0"
types-docutils = "^0.19.1"
types-Markdown = "^3.4.2"

[tool.poetry.group.linters]
optional = true
[tool.poetry.group.linters.dependencies]
ruff = "^0.0.247"
pylint = { version = "^2.16", python = ">=3.7.2" }

# Tools configuration
[tool.pylint]
# Override default pylint configurations
# To update, run `pylint --generate-rcfile` for default reference or check the docs:
#  - http://pylint.pycqa.org/en/latest/technical_reference/features.html
[tool.pylint.format]
max-line-length = 120

[tool.pytest.ini_options]
pythonpath = ["tests"]
testpaths = ["tests"]
python_files = ["test_*.py"]

# pytest-django settings
DJANGO_SETTINGS_MODULE = "testsite.settings"
FAIL_INVALID_TEMPLATE_VARS = true

[tool.black]
target-version = ["py35", "py36", "py37", "py38", "py39", "py310"]
extend-exclude = '''
# A regex preceded with ^/ will apply only to files and directories
# in the root of the project.
(
  module_with_syntax_errors\.py
  | xxx_other_rules
)'''

[tool.mypy]
exclude = [
    '^tests/.+$',
    '^docs/.+$',
]

[tool.ruff]
# List of rules currently enabled.
# Docs: https://beta.ruff.rs/docs/rules/
select = [
    "E", "F", # pyflakes + pycodestyle Errors (ruff's default)
    "W", # pycodestyle warnings
    "C90", # mccabe: functions complexity
    # "I", # isort: enabling this one will require more config to avoid conflicts with PyCharm "Organize imports"
    # "N", # pep8-naming
    "UP", # pyupgrade
    "YTT", # flake8-2020
    # "ANN", # flake8-annotations
    "S", # flake8-bandit
    # "BLE", # flake8-blind-except
    # "FBT", # flake8-boolean-trap
    "B", # flake8-bugbear
    "A", # flake8-builtins
    "DJ", # flake8-django
    "T20", # flake8-print
    # "DTZ", # flake8-datetimez
    # "EM", # flake8-errormsg
    "ICN", # flake8-import-conventions
    "INP", # flake8-no-pep420
    "PIE", # flake8-pie
    "SIM", # flake8-print
    "PGH", # pygrep-hooks
    "PLC", # PyLint (Convention)
    "PLE", # PyLint (Error)
    "PLR", # PyLint (Refactor)
    "PLW", # PyLint (Warning)
    "RUF", # Ruff specific rules
]

line-length = 120
target-version = "py37"
extend-exclude = [
    "module_with_syntax_errors.py",
]

[tool.ruff.per-file-ignores]
# Invalid import is expected in this file, this is part of a test
"tests/testsite/rpc_methods_stub/module_with_invalid_import.py" = ["F401"]
# Some issues are irrelevant in tests
"tests/*" = ["PLR2004", "PLR0913", "S"]
# TODO: following files uses python 3.5 specific variable type hints, in comments
#  Unfortunately, pyflakes triggers an "Unused import" error in such case.
#  This should be removed when python 3.5 support will be dropped and variables type hints
#  will be converted to 3.6+ standard (variable: type = value)
"modernrpc/conf/default_settings.py" = ["F401"]
"modernrpc/handlers/base.py" = ["F401"]
"modernrpc/handlers/jsonhandler.py" = ["F401"]
"modernrpc/system_methods.py" = ["F401"]
"tests/functional/conftest.py" = ["F401"]

[tool.ruff.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.ruff.isort]
# TBD
